const fs = require("fs");
const axios = require('axios');
const fetch = require('node-fetch');

const handler = async (msg, { conn, args, usedPrefix, command }) => {
const jp = [
  'https://files.catbox.moe/rdyj5q.mp4',
  'https://files.catbox.moe/693ws4.mp4'
];
const jpg = jp[Math.floor(Math.random() * jp.length)];
  let or = ['grupo', 'gif', 'anu'];
  let media = or[Math.floor(Math.random() * 3)]
    const text = args.join(' ');
    const chatId = msg.key.remoteJid;
    
    if (!text) {
        return conn.sendMessage(chatId, { 
            text: `${e} Ingresa tu pregunta\nEjemplo: *${usedPrefix + command}* ¬øqui√©n invent√≥ WhatsApp?` 
        }, { quoted: msg });
    }

    try {
        await conn.sendMessage(chatId, { react: { text: 'üïí', key: msg.key } });

        const name = msg.pushName || 'Usuario';
        const prompt = await getPrompt();
        let result = '';

        try {
            result = await luminaiQuery(text, name, prompt);
            result = cleanResponse(result);
        } catch (e) {
            console.error('Error Luminai:', e);
            try {
                result = await perplexityQuery(text, prompt);
            } catch (e) {
                console.error('Error Perplexity:', e);
                throw new Error('No se obtuvo respuesta de los servicios');
            }
        }

        const txt = `${result}`;
await conn.sendMessage(chatId, {
            react: { text: "‚úÖ", key: msg.key} 
        });
  const red = await global.getRandomRed();
console.log(red);
  const im = await global.getRandomIcon();
if (im) {
if (media === 'grupo') {
await conn.sendMessage(chatId, {
  text: txt,
  contextInfo: {
    externalAdReply: {
      title: `${msg.pushName}`,
      body: textbot,
      thumbnailUrl: red,
      thumbnail: im,
      sourceUrl: red,
      mediaType: 1,
      renderLargerThumbnail: true
    }
  }
}, { quoted: msg })};
  
  if (media === 'gif') {
await conn.sendMessage(chatId, {
    video: { url: jpg },
    gifPlayback: true,
    caption: txt,
    contextInfo: {
          mentionedJid: [],
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
              newsletterJid: channel,
              newsletterName: wm,
              serverMessageId: -1,
          },
          forwardingScore: false,
          externalAdReply: {
              title: `${msg.pushName}`,
              body: textbot,
              thumbnailUrl: red,
              thumbnail: im,
              sourceUrl: red,
              mediaType: 1,
              showAdAttribution: true,
              //renderLargerThumbnail: true,
          },
      },
  }, { quoted: msg })};

if (media === 'anu') {
await conn.sendMessage(chatId, {
    text: txt, 
    contextInfo: {
      mentionedJid: [],
      groupMentions: [],
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
        newsletterJid: channel,
        newsletterName: wm,
        serverMessageId: 0
      },
      businessMessageForwardInfo: { businessOwnerJid: '50492280729@s.whatsapp.net' },
      forwardingScore: 0,
      externalAdReply: {
        title: `${msg.pushName}`,
        body: textbot,
        thumbnailUrl: red,
        thumbnail: im,
        sourceUrl: red
      }
    }
  }, { quoted: msg })}
  
  };

    } catch (error) {
        console.error(error);
        await conn.sendMessage(chatId, { 
            text: `‚ùå Error: ${error.message}` 
        }, { quoted: msg });
        
        await conn.sendMessage(chatId, { react: { text: '‚ùå', key: msg.key } });
    }
};

async function getPrompt() {
    try {
        const res = await fetch('https://raw.githubusercontent.com/elrebelde21/LoliBot-MD/main/src/text-chatgpt.txt');
        return await res.text();
    } catch {
        return 'Eres un asistente inteligente';
    }
}

function cleanResponse(text) {
    if (!text) return '';
    return text
        .replace(/Maaf, terjadi kesalahan saat memproses permintaan Anda/g, '')
        .replace(/Generated by BLACKBOX\.AI.*?https:\/\/www\.blackbox\.ai/g, '')
        .replace(/and for API requests replace https:\/\/www\.blackbox\.ai with https:\/\/api\.blackbox\.ai/g, '')
        .trim();
}

async function luminaiQuery(q, user, prompt) {
    const { data } = await axios.post('https://luminai.my.id', {
        content: q,
        user: user,
        prompt: prompt,
        webSearchMode: true
    });
    return data.result;
}

async function perplexityQuery(q, prompt) {
    const { data } = await axios.get('https://api.perplexity.ai/chat', {
        params: {
            query: encodeURIComponent(q),
            context: encodeURIComponent(prompt)
        }
    });
    return data.response;
}

handler.command = ['luminai', 'ia', 'ai', 'ask', 'chatgpt', 'gpt'];
module.exports = handler;
